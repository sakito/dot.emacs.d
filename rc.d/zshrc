# -*- mode:sh -*-
# ~/.zshrc 
# 作成開始: [2002/10/01]
# 
#-----------------------------------------------------------------
# 基本設定
#-----------------------------------------------------------------
WORDCHARS="*?_-.[]~=&;\!#$%^(){}<>"
HISTSIZE=4096
HISTFILE=${HOME}/var/zsh/zsh_history
SAVEHIST=4096
umask 022

#-----------------------------------------------------------------
# 判定用関数
#-----------------------------------------------------------------
# Mac OS X特有の設定を切り分るための関数
isdarwin(){
    [[ $OSTYPE == darwin* ]] && return 0
    return 1
}

# Emacs の term で動作させた場合
isemacs(){
    [[ "$EMACS" != "" ]] && return 0
    return 1
}

#-----------------------------------------------------------------
# 環境変数
#-----------------------------------------------------------------
#SHELL=/bin/zsh
isdarwin && export SHELL=/opt/local/bin/zsh

export PREFIX=/usr/local
#export EXEC_PREFIX=/usr/local/bin

# 時刻の設定
export TZ=JST-9

# 文字コード設定
export LC_ALL="ja_JP.UTF-8"

# DISPLAY
export DISPLAY="localhost"

# 一時ファイル
export TMP="${HOME}/tmp"

# EDITOR
export EDITOR="/usr/local/bin/emacsclient"

# パスとコマンド固有の設定
# Mac OS X の初期パスは /usr/bin:/bin:/usr/sbin:/sbin:/usr/X11R6/bin:

# fink setting
#isdarwin && source /sw/bin/init.sh

export PATH=/Library/Frameworks/Python.framework/Versions/Current/bin:${PATH}
export PATH=/usr/local/sbin:${PATH}
export PATH=/usr/local/bin:${PATH}

# for screen(chmod 700)
export SCREENDIR=${HOME}/.screen

# MacPorts
isdarwin && export PATH=/opt/local/bin:${PATH}

# CVS
export CVSROOT=${HOME}/var/cvs
export CVS_RSH="ssh"

# mysql
export PATH=/usr/local/mysql/bin:${PATH}

# LaTeX
export PATH=${HOME}/bin/platex/pTeX.app/teTeX/bin:${PATH}
export TEXINPUTS=${HOME}/lib/tex//:${TEXINPUTS}

# Git
export PATH=${PATH}:/usr/local/git/bin

# Haskell
export PATH=${PATH}:${HOME}/.cabal/bin

# Go
export PATH=${PATH}:${HOME}/bin/go/bin

# Firefox Addon SDK
export PATH=${PATH}:${HOME}/bin/addon-sdk-1.0b4/bin

# Python
export PYTHONSTARTUP="${HOME}/.pythonrc.py"
export PYTHONPATH=${HOME}/local/lib/python2.7/site-packages
export VIRTUAL_ENV=${HOME}/local
export WORKON_HOME=${HOME}/.virtualenvs
#source ${HOME}/local/bin/virtualenvwrapper.sh
export PIP_RESPECT_VIRTUALENV=true

# Java
export JAVA_OPTS="-Dfile.encoding=UTF-8"
# Ant
export ANT_HOME=${HOME}/bin/apache-ant-1.8.2
export PATH=${ANT_HOME}/bin:${PATH}
# Maven
# export MAVEN_HOME=${HOME}/bin/maven
# export PATH=${MAVEN_HOME}/bin:${PATH}

# CLASSPATH
# export CLASSPATH=${CLASSPATH}:.
if [ -r ${HOME}/lib/java/classpath ]; then
  if [ -z "$CLASSPATH" ]; then
    export CLASSPATH=`cat ${HOME}/lib/java/classpath`
  else
    export CLASSPATH=`cat ${HOME}/lib/java/classpath`:$CLASSPATH
  fi
fi

# less
#export LESSCHARDEF=8bcccbcc18b95.33b33b.
export LESSCHARSET=utf-8
export LESS='-c -m -x4 -R'
export LESS="-isnMCd"
export LESSBINFMT='*n-'
export PAGER=less
export CLICOLOR_FORCE=1

#CC setting
export CC=clang

# set man command env.
export MANPATH=/usr/bin/man:/usr/local/man:/usr/share/man:/Developer/usr/share/man:/opt/local/man
export MANPAGER=/usr/bin/less
export MANWIDTH=80

# for Mercurial
export HGENCODING=utf-8

# 64bit
export ARCHFLAGS='-Os -arch i386 -arch x86_64 -fno-common'

# 最優先パス
export PATH=${HOME}/.emacs.d/bin:${PATH}
export PATH=${HOME}/bin:${PATH}
export PATH=${HOME}/local/bin:${PATH}
export PATH=${HOME}/bin/air/bin:${PATH}

#-----------------------------------------------------------------
# 非端末プロセスなら終了
#-----------------------------------------------------------------
# スクリプトとして起動された場合、ここでプロセスが終了する。
[ $#PROMPT -eq 0 -o $#TERM -eq 0 ] && return

#-----------------------------------------------------------------
# オプション
#-----------------------------------------------------------------
# 無駄なスクロールを避ける
setopt always_last_prompt
# 履歴ファイルに追加
setopt append_history
# 自動的に候補一覧を表示
setopt auto_list
# 自動的に補完候補を表示する
unsetopt auto_menu
# "~$var" でディレクトリにアクセス
#setopt	auto_name_dirs
# 変数名に対して無駄なスペースの削除やカッコの補完をする
setopt auto_param_keys
# cdのタイミングで自動的にpushd
setopt auto_pushd
# 無駄な末尾の / を削除する
setopt auto_remove_slash
# csh スタイルのヒストリ置換
setopt bang_hist
# {a-za-z} をブレース展開
setopt brace_ccl
# 先頭に "~" を付けたもので展開
setopt cdable_vars
# 語の途中でもカーソル位置で補完
setopt complete_in_word
# 補完動作の解釈前にエイリアス展開
setopt complete_aliases
# タイプミスの修正
setopt correct
# = で初まる物をコマンドとして展開する 例：ls =ps  デフォルトで有効
# setopt equals
# "#", "~", "^" を正規表現として扱う
setopt extended_glob
# 履歴ファイルに開始/終了タイムスタンプを書き込み
setopt extended_history
# "*" にドットファイルをマッチ
# setopt glob_dots
# ">" を ">!" としてヒストリ保存
setopt hist_allow_clobber
# 以前のコマンドと全く同じ時以前の履歴から削除して新たに追加する
setopt hist_ignore_all_dups
# 直前の履歴と全く同じとき履歴に追加しない
setopt hist_ignore_dups
# 先頭がスペースで始まるときスペースを無視
setopt hist_ignore_space
# 余分なスペースを削除して履歴に保存
setopt hist_reduce_blanks
# 履歴を直接実行せず編集状態にする
# setopt hist_verify
# ctr-d で終了しない
setopt ignore_eof
# コマンド確定後すぐに履歴ファイルに保存する(設定しないと exit 時)
setopt inc_append_history
# 補完候補をコンパクトにする
setopt list_packed
# ファイル種別を表す記号を末尾に表示
setopt list_types
# "val=expr" のような = 以降でファイル名展開
setopt magic_equal_subst
# 一覧表示せずに、すぐに最初の候補を補完
#setopt	menu_complete
# 複数のリダイレクトやパイプに対応
setopt multios
# ファイル名を数値的にソート
setopt numeric_glob_sort
# リダイレクトで上書き禁止
setopt no_clobber
# ベルを鳴らさない
#setopt no_beep
# シェル終了時にジョブをチェックしない
#setopt no_check_jobs
# C-s/C-q によるフロー制御をしない
setopt no_flow_control
# 走行中のジョブにシグナルを送らない
setopt no_hup
# 補完の時にベルを鳴らさない
setopt no_list_beep
# ジョブの状態をただちに知らせる
setopt notify
# 補完候補の最初を自動補完しない
unsetopt menu_complete
# プロンプト内で変数展開
setopt prompt_subst
# 8ビットクリーン表示
setopt print_eight_bit
# 重複するディレクトリを無視
setopt pushd_ignore_dups
# "rm * " を実行する前に確認しない
# setopt rm_star_silent
# 複数端末間で履歴ファイルを共有する
setopt share_history
# 行末の "` (バッククウォート)" を無視
setopt sun_keyboard_hack
# 変数内の文字列分解のデリミタ
setopt sh_word_split
# コマンド実行後は右プロンプトを消す
setopt transient_rprompt

#-----------------------------------------------------------------
# プロンプト設定
#-----------------------------------------------------------------
# tmux を利用している時にプロンプトに window 番号を設定
if [ "$TMUX" != "" ] ; then
    # export WINDOW=`tmux display -pt $TMUX_PANE '#S:#I.#P'`
    export WINDOW=`tmux display -pt $TMUX_PANE '#I.#P'`
fi

# tmux で接続先が screen の時の対処
case ${TERM} in
    screen-256color) TERM=screen.xterm-xfree86
esac

# カラー記述を簡略化
# 数字や文字で色を指定できるようにする
# 0:black
# 1:red
# 2:green
# 3:yellow
# 4:blue
# 5:magenta
# 6:cyan
# 7:white
# それ以外：black
# %f:reset_color
autoload -Uz colors; colors
# 左プロンプト
#PROMPT="%{$fg[green]%}%n@%m%{$fg[magenta]%}${WINDOW:+[$WINDOW]}%{$fg[white]%}%#%f "
PROMPT="%F{green}%n@%m%F{magenta}${WINDOW:+[$WINDOW]}%F{white}%#%f "

# 右プロンプト
# バージョン管理システム関連の情報を表示(zsh >=4.3.6)
autoload -Uz is-at-least
if is-at-least 4.3.6; then
    autoload -Uz vcs_info
    zstyle ':vcs_info:*' enable bzr git svn hg
    if [[ "$TERM" == dumb ]] ; then
        # emacs 等から接続すると dumb 端末と認識され、そうした端末では色を出さないようにする
        zstyle ':vcs_info:*' actionformats "(%s%)-[%b|%a] " "zsh: %r"
        zstyle ':vcs_info:*' formats "(%s%)-[%b] " "zsh: %r"
    else
        # 色をつける
        zstyle ':vcs_info:*' actionformats '%F{magenta}(%f%s%F{magenta})%F{yellow}-%F{magenta}[%F{green}%b%F{yellow}|%F{red}%a%F{magenta}]%f '
        zstyle ':vcs_info:*' formats '%F{magenta}(%f%s%F{magenta})%F{yellow}-%F{magenta}[%F{green}%b%F{magenta}]%f '
        zstyle ':vcs_info:(sv[nk]|bzr):*' branchformat '%b%F{red}:%F{yellow}%r'
        zstyle ':vcs_info:bzr:*' use-simple true
        if is-at-least 4.3.10; then
            zstyle ':vcs_info:*' check-for-changes true
            zstyle ':vcs_info:*' stagedstr "+"
            zstyle ':vcs_info:*' unstagedstr "-"
        fi
    fi
fi

function precmd() {
    local color
    if [[ ${PWD}/ == /Volumes/* ]]; then
        color=${fg[yellow]}${bg[red]}
    else
        color=${fg[white]}
    fi

    psvar=()
    vcs_info

    if [ "$EMACS" ];then
        # Emacs の ansi-term では右プロンプトを表示しない
        RPROMPT=""
    else
        # setopt prompt_subst を設定するとプロンプトに変数そのまま記述できる
        # %39<...<%- は 39文字以上になったら前方を ... に置換する設定
        #RPROMPT='[%F{green}%39<...<%~%f] ${vcs_info_msg_0_}%f'
        if [[ ${PWD}/ == /Volumes/* ]]; then
            # Volumes 以下にいる場合
            RPROMPT='[%F{yellow}%K{red}%39<...<%~%k%f] ${vcs_info_msg_0_}'
        else
            # Volumes 以下にいない場合
            RPROMPT='[%F{white}%39<...<%~%f] ${vcs_info_msg_0_}'
        fi
    fi

}

# -----------------------------------------------------------------
# 色設定
#-----------------------------------------------------------------
# @see http://journal.mycom.co.jp/column/zsh/009/index.html
# color setup for ls:
#check_com -c dircolors && eval $(dircolors -b)
# color setup for ls on OS X:
isdarwin && export CLICOLOR=1
#               1234567890123456789012
export LSCOLORS=GxhFCxdxHbegedabagacad
#export LSCOLORS=GxDxcxdxbhededabagacad
#export LSCOLORS=''"gxfxcxdxbxegedabagacad"
#export LSCOLORS=ExFxCxdxBxegedabagacad
# coreutils ls の場合
# ディレクトリを緑色にする
#export LS_COLORS=':di=01;30:'
#export LS_COLORS=':di=30:'

#-----------------------------------------------------------------
# 補完設定
#-----------------------------------------------------------------
# 補完無視ファイル設定
fignore=(.o .dvi .aux .toc - \~)
# 補完の利用設定
autoload -Uz compinit; compinit
# 補完表示を全てする
zstyle ':completion:*' verbose 'yes'
# 補完の機能を拡張
zstyle ':completion:*' completer _expand _complete _match _prefix _approximate _list _history
# 補完候補に LSCOLORS 同様色を付与
zstyle ':completion:*:default' list-colors ${(s.:.)LSCOLORS}
# 補完メッセージの色
zstyle ':completion:*:messages' format "%{$fg[yellow]%}'%d'%f"
zstyle ':completion:*:warnings' format "%{$fg[red]%}'No matches for:'%{$fg[yellow]%}' %d'%f"
zstyle ':completion:*:descriptions' format "%{$fg[yellow]%}'completing %B%d%b'%f"
zstyle ':completion:*:corrections' format "%{$fg[yellow]%}'%B%d '%{$fg[red]%}'(errors: %e)%b'%f"
# 補完説明を表示する
zstyle ':completion:*:options' description 'yes'
# ファイルリスト補完でもlsと同様に色をつける
zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}
# sudo でも補完の対象とする
zstyle ':completion:*:sudo:*' command-path /usr/local/sbin /usr/local/bin /usr/sbin /usr/bin /sbin /bin
# kill 補完で実行されるコマンドを指定
zstyle ':completion:*:processes' command 'ps x -o pid,s,args'
# 補完をキャッシュ
zstyle ':completion:*' use-cache on
# キャッシュファイル位置
zstyle ':completion:*' cache-path ~/var/zsh/zsh_completion.cache
# 補完時一部のblobを省略して高速化
zstyle ':completion:*' accept-exact '*(N)'


# URLをコピペした時にエスケープ対象文字を自動エスケープする
autoload -Uz url-quote-magic
zstyle ':url-quote-magic:*' url-metas '?'
zle -N self-insert url-quote-magic

#-----------------------------------------------------------------
# 関数定義
#-----------------------------------------------------------------

# ccl
function ccl() {
    BREAK_CHARS="(){}[],^%$#@\"\";''|\\"
    ccl="rlwrap -pgreen -r -m --history-filename=${HOME}/.ccl/ccl_history --histsize=1000000 -c -b ${BREAK_CHARS} -f ${HOME}/.ccl/ccl_completions ccl64 -K utf-8"
    if [ "$1" = "--script" ]; then
        $ccl --load "$2" --eval '(ccl:quit)'
    else
        $ccl $@
    fi
}

# @see http://masutaka.net/chalow/2011-09-28-1.html
# ディレクトリを Emacs の dired で開く
function dired () {
    emacsclient -e "(dired \"${1:a}\")"
}

# emacs 側に設定が必要です init_elscreen に関数を定義してあります
function cde () {
    EMACS_CWD=`emacsclient -e "
    (if (featurep 'elscreen)
    (elscreen-current-directory)
    (non-elscreen-current-directory))" | sed 's/^"\(.*\)"$/\1/'`

    echo "chdir to $EMACS_CWD"
    cd "$EMACS_CWD"
}

#-----------------------------------------------------------------
# エイリアス設定
#-----------------------------------------------------------------
alias ls='ls -vFG'
alias ll='ls -ltrh'
alias la='ls -a'
alias h='history 20'
alias more='less'
alias rm='rm -i'
#alias which='type -path'
alias rehash='hash -r'
#alias rmdir='rm -rf'
alias s=source
alias x=start
alias j=jobs
alias reload="source ~/.zshrc"
alias emacs='emacs -nw'
alias screen='screen -U'
#alias ccl=ccl64

# グローバルエイリアス
alias -g V="| /usr/share/vim/vim73/macros/less.sh"

# 自分に依存した設定
alias sakuradiary="~/bin/scp_diary.command"
alias site_sync="~/Sites/sakitojp/bin/site_sync.sh"
alias easy_install64="env ARCHFLAGS='-Os -arch i386 -arch x86_64 -fno-common' easy_install -UZ "

#-----------------------------------------------------------------
# キーバインド設定
#-----------------------------------------------------------------
bindkey -e
bindkey '^/' undo
bindkey '^g' undo
bindkey '^q' push-line
bindkey '^w' kill-region
bindkey '^i' expand-or-complete 
bindkey '^d' delete-char-or-list
bindkey '^j' reverse-menu-complete
bindkey '^n' history-search-forward
bindkey '^p' history-search-backward
bindkey '^r' copy-prev-word
bindkey ' '  magic-space

#-----------------------------------------------------------------
# システム別設定
#-----------------------------------------------------------------
#if [ ! -S ${SSH_AUTH_SOCK} ]; then
#    eval `ssh-agent -a ${SSH_AUTH_SOCK}`
#    echo ${SSH_AGENT_PID} > /tmp/ssh_agent_pid
#    ssh-add
#else
#    export SSH_AGENT_PID=`cat /tmp/ssh_agent_pid`
#fi

#-----------------------------------------------------------------
# ローカル設定の読み込み
#-----------------------------------------------------------------
# [ -f ~/.zshrc.local ] && source ~/.zshrc.local

echo Now zsh version $ZSH_VERSION start!

# 端末をクリアして終了
# builtin cls
# end of ~/.zshrc
#=================================================================
