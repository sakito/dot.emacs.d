* 利用しなくなった物などのメモ

* lsp-bridge

#+begin_src emacs-lisp
(leaf lsp-bridge
  :el-get (lsp-bridge
           :url "https://github.com/manateelazycat/lsp-bridge.git")
  :custom (
           (lsp-bridge-python-lsp-server . "pyright")))
#+end_src


* theme

#+begin_src emacs-lisp
;; (leaf emacs-theme
;;   :when window-system
;;   :config
;;   (add-to-list 'custom-theme-load-path
;;                (locate-user-emacs-file "lisp/theme"))
;;   (load-theme 'nightsblue t t)
;;   (enable-theme 'nightsblue)
;;   )
#+end_src


* emacsclient

teminalでの操作はNeovim利用のため
emacsclient利用しなくなったので、削除

#+begin_src emacs-lisp
(leaf server
  :doc "emacsclient を利用するためにサーバ起動
サーバが起動していた場合は先に起動していた方を優先"
  :require t
  :defun (server-running-p)
  :config
  (unless (server-running-p) (server-start))
  (defun my/raise-frame()
    ;; Frame を前面にする
    (raise-frame (selected-frame))
    ;; キーボードフォーカスを選択しているFrameにする
    (x-focus-frame (selected-frame)))
  :hook (
         (server-visit-hook . my/raise-frame)
         (find-file-hook . my/raise-frame)))
#+end_src

* ls-lisp

#+begin_src emacs-lisp
  ;; s で並び変え、C-u s で元に戻る
  ;; @see sorter.el
  ;; (leaf sorter
  ;;   :load-path* "lisp"
  ;;   :require t)

  ;; ;; システムのlsでなくls-lispを利用して表示
  ;; (leaf ls-lisp
  ;;   :require t
  ;;   :custom ((ls-lisp-use-insert-directory-program . nil)
  ;;            ;; ls のオプション
  ;;            (dired-listing-switches . "-lahF")
  ;;            ;; ディレクトリをより上に表示
  ;;            (ls-lisp-dirs-first . t)
  ;;            ))
#+end_src


* helm

 * helm-postframe: frameが画面に残ってしまう事があるので、利用断念


* autoinsert

#+begin_src emacs-lisp
;; (leaf autoinsert
;;   :require t
;;   :global-minor-mode auto-insert-mode
;;   :defvar auto-insert-alist template-replacements-alists
;;   :init
;;   ;; 置換用の関数
;;   (defun my/template ()
;;     (time-stamp)
;;     (mapc #'(lambda(c)
;;               (progn
;;                 (goto-char (point-min))
;;                 (replace-string (cl-first c) (funcall (cl-rest c)) nil)))
;;           template-replacements-alists)
;;     (goto-char (point-max))
;;     (message "done."))
;;   :custom `(
;;            ;; テンプレートとなるファイルがあるディレクトリ
;;            ;; 末尾に"/"が必要なので注意
;;            (auto-insert-directory
;;             . ,(expand-file-name "etc/autoinsert/" user-emacs-directory))

;;            ;; 質問しないで auto-insertを実行する
;;            (auto-insert-query . nil))

;;   :config
;;   ;; テンプレート用の置換文字列
;;   (defvar template-replacements-alists
;;     '(
;;       ("%file%" . (lambda () (file-name-nondirectory (buffer-file-name))))
;;       ("%module%" . (lambda () (file-name-sans-extension (file-name-nondirectory (buffer-file-name)))))
;;       ;;("%time%" . (lambda () (format-time-string "%Y-%m-%d %k:%M:%S" (current-time))))
;;       ("%time%" . (lambda () (format-time-string "%Y-%m-%d 00:00:00" (current-time))))
;;       ("%year%" . (lambda () (format-time-string "%Y" (current-time))))
;;       ;; ("%file-without-ext%" . (lambda () (file-name-sans-extension (file-name-nondirectory (buffer-file-name)))))
;;       ;; ("%include-guard%" . (lambda () (format "__SCHEME_%s__" (upcase (file-name-sans-extension (file-name-nondirectory buffer-file-name))))))
;;       ))

;;   ;; 各モードの設定
;;   ;; Python
;;   (setq auto-insert-alist
;;         (nconc '(
;;                  ("\\.rst$" . ["rst.rst" my/template])
;;                  (python-mode . ["python.py" my/template])
;;                  ) auto-insert-alist))
;;   ;; Lisp
;;   (setq auto-insert-alist
;;         (nconc '(
;;                  ("\\.cl$" . ["cl.lisp" my/template])
;;                  ("\\.lisp$" . ["cl.lisp" my/template])
;;                  (lisp-mode . ["cl.lisp" my/template])
;;                  ) auto-insert-alist))

;;   ;; Shell
;;   (setq auto-insert-alist
;;         (nconc '(
;;                  ("\\.sh$" . ["shell.sh" my/template])
;;                  (sh-mode . ["shell.sh" my/template])
;;                  ) auto-insert-alist))
;;   :hook (
;;          ;; ファイルを開いたら実行
;;          (find-file-hook . auto-insert)
;;          (find-file-not-found-hooks . auto-insert))
;;   )
#+end_src


* font

#+begin_src emacs-lisp
(leaf font
  :doc "https://github.com/yuru7/Firge"
  :config
  (set-face-attribute 'default
                      nil
                      :family "Firge35"
                      :height 180)
  (set-frame-font "Firge35-18")
  (set-fontset-font nil
                    'unicode
                    (font-spec :family "Firge35")
                    nil
                    'append)
  ;; 古代ギリシア文字、コプト文字を表示したい場合は以下のフォントをインストールする
  ;; http://apagreekkeys.org/NAUdownload.html
  (set-fontset-font nil
                    'greek-iso8859-7
                    (font-spec :family "New Athena Unicode")
                    nil
                    'prepend)
  ;; 記号        3000-303F http://www.triggertek.com/r/unicode/3000-303F
  ;; 全角ひらがな 3040-309f http://www.triggertek.com/r/unicode/3040-309F
  ;; 全角カタカナ 30a0-30ff http://www.triggertek.com/r/unicode/30A0-30FF
  (set-fontset-font nil
                    '( #x3000 .  #x30ff)
                    (font-spec :family "Firge35")
                    nil
                    'prepend)
  ;; 半角カタカナ、全角アルファベット ff00-ffef http://www.triggertek.com/r/unicode/FF00-FFEF
  (set-fontset-font nil
                    '( #xff00 .  #xffef)
                    (font-spec :family "Firge35")
                    nil
                    'prepend)
  )
#+end_src


* PATH設定

#+begin_src emacs-lisp
  ;; PATH設定
  ;; Mac OS X の bash の PATH は /usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin:/usr/X11/bin:
  ;; 多数の実行環境にて極力汎用的にパスが設定されるようしたい
  (dolist (dir (list
                "/sbin"
                "/usr/sbin"
                "/bin"
                "/usr/bin"
                "/opt/homebrew/bin"
                "/usr/local/bin"
                "/usr/texbin"
                (expand-file-name "~/bin")
                (expand-file-name "~/.emacs.d/bin")
                (expand-file-name "~/opt/py/py3.13.4/bin")
                (expand-file-name "~/.cargo/bin/")
                (expand-file-name "~/.local/share/mise/shims")
                (expand-file-name "~/.npm-packages/bin")
                (expand-file-name "bin" user-emacs-directory)
                ))
    (when (and (file-exists-p dir) (not (member dir exec-path)))
      (setenv "PATH" (concat dir ":" (getenv "PATH")))
      (setq exec-path (append (list dir) exec-path))))
#+end_src

* css
css モードは css-ts-mode に移行
色は rainbow-mode にて付与

#+begin_src emacs-lisp
(leaf css-mode
  :require t)
  :mode "\\.css\\'"
  :init
  (defun my/hexcolour-luminance (color)
    "Calculate the luminance of a color string (e.g. \"#ffaa00\", \"blue\").
  This is 0.3 red + 0.59 green + 0.11 blue and always between 0 and 255."
    (let* ((values (x-color-values color))
           (r (car values))
           (g (cadr values))
           (b (caddr values)))
      (floor (+ (* .3 r) (* .59 g) (* .11 b)) 256)))

  (defun my/hexcolour-add-to-font-lock ()
    (interactive)
    (font-lock-add-keywords nil
                            `((,(concat "#[0-9a-fA-F]\\{3\\}[0-9a-fA-F]\\{3\\}?\\|"
                                        (regexp-opt (x-defined-colors) 'words))
                               (0 (let ((colour (match-string-no-properties 0)))
                                    (put-text-property
                                     (match-beginning 0) (match-end 0)
                                     'face `((:foreground ,(if (> 128.0 (my/hexcolour-luminance colour))
                                                               "white" "black"))
                                             (:background ,colour)))))))))
  :hook (css-ts-mode-hook . my/hexcolour-add-to-font-lock)
  )
#+end_src


以上
